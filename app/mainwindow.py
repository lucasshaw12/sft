# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '../gui/sft.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QProgressBar
from PyQt5.QtCore import QTimer, QDateTime, QBasicTimer
from PyQt5.QtGui import QFont
from imagewindow import Ui_external_image_window  # External window to display graphs
from progress import Execute  # External window to display progress bar
import shutil
import bs4
import requests
import feedparser
from PIL import Image

class Ui_MainWindow(object):
    def openWindow(self):
        """Initialises external window QFrame (which holds the chart (.png) image.)"""

        self.window = QtWidgets.QFrame()
        self.ui = Ui_external_image_window()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(903, 925)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(110, 545, 231, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(652, 552, 61, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(110, 605, 251, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(110, 665, 221, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(110, 725, 231, 31))
        self.label_5.setObjectName("label_5")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(500, 820, 91, 21))
        self.label_7.setObjectName("label_7")
        self.uk_housing_show_chart_btn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow())
        self.uk_housing_show_chart_btn.setGeometry(QtCore.QRect(40, 567, 113, 32))
        self.uk_housing_show_chart_btn.setObjectName("uk_housing_show_chart_btn")
        self.uk_electric_show_chart_btn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow())
        self.uk_electric_show_chart_btn.setGeometry(QtCore.QRect(40, 627, 113, 32))
        self.uk_electric_show_chart_btn.setObjectName("uk_electric_show_chart_btn")
        self.uk_water_show_chart_btn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow())
        self.uk_water_show_chart_btn.setGeometry(QtCore.QRect(40, 747, 113, 32))
        self.uk_water_show_chart_btn.setObjectName("uk_water_show_chart_btn")
        self.uk_gas_show_chart_btn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow())
        self.uk_gas_show_chart_btn.setGeometry(QtCore.QRect(40, 687, 113, 32))
        self.uk_gas_show_chart_btn.setObjectName("uk_gas_show_chart_btn")
        self.export_uk_housing_chart_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_housing_chart_btn.setGeometry(QtCore.QRect(170, 567, 113, 32))
        self.export_uk_housing_chart_btn.setObjectName("export_uk_housing_chart_btn")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(120, 517, 231, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(642, 517, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.export_bbc_business_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_business_rss_feed_btn.setGeometry(QtCore.QRect(720, 575, 113, 32))
        self.export_bbc_business_rss_feed_btn.setObjectName("export_bbc_business_rss_feed_btn")
        self.export_investing_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_investing_rss_feed_btn.setGeometry(QtCore.QRect(720, 815, 113, 32))
        self.export_investing_rss_feed_btn.setObjectName("export_investing_rss_feed_btn")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(380, 10, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.export_uk_housing_xlsx_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_housing_xlsx_btn.setGeometry(QtCore.QRect(300, 567, 113, 32))
        self.export_uk_housing_xlsx_btn.setObjectName("export_uk_housing_xlsx_btn")
        self.export_uk_electric_chart_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_electric_chart_btn.setGeometry(QtCore.QRect(170, 627, 113, 32))
        self.export_uk_electric_chart_btn.setObjectName("export_uk_electric_chart_btn")
        self.export_uk_electric_xlsx_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_electric_xlsx_btn.setGeometry(QtCore.QRect(300, 627, 113, 32))
        self.export_uk_electric_xlsx_btn.setObjectName("export_uk_electric_xlsx_btn")
        self.export_uk_gas_chart_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_gas_chart_btn.setGeometry(QtCore.QRect(170, 687, 113, 32))
        self.export_uk_gas_chart_btn.setObjectName("export_uk_gas_chart_btn")
        self.export_uk_gas_xlsx_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_gas_xlsx_btn.setGeometry(QtCore.QRect(300, 687, 113, 32))
        self.export_uk_gas_xlsx_btn.setObjectName("export_uk_gas_xlsx_btn")
        self.export_uk_water_chart_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_water_chart_btn.setGeometry(QtCore.QRect(170, 747, 113, 32))
        self.export_uk_water_chart_btn.setObjectName("export_uk_water_chart_btn")
        self.export_uk_water_xlsx_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_water_xlsx_btn.setGeometry(QtCore.QRect(300, 747, 113, 32))
        self.export_uk_water_xlsx_btn.setObjectName("export_uk_water_xlsx_btn")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(110, 785, 231, 31))
        self.label_11.setObjectName("label_11")
        self.export_uk_cpi_xlsx_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_cpi_xlsx_btn.setGeometry(QtCore.QRect(300, 807, 113, 32))
        self.export_uk_cpi_xlsx_btn.setObjectName("export_uk_cpi_xlsx_btn")
        self.uk_cpi_show_chart_btn = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow())
        self.uk_cpi_show_chart_btn.setGeometry(QtCore.QRect(40, 807, 113, 32))
        self.uk_cpi_show_chart_btn.setObjectName("uk_cpi_show_chart_btn")
        self.export_uk_cpi_chart_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_uk_cpi_chart_btn.setGeometry(QtCore.QRect(170, 807, 113, 32))
        self.export_uk_cpi_chart_btn.setObjectName("export_uk_cpi_chart_btn")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(500, 579, 61, 21))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(500, 609, 61, 21))
        self.label_13.setObjectName("label_13")
        self.export_bbc_education_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_education_rss_feed_btn.setGeometry(QtCore.QRect(720, 605, 113, 32))
        self.export_bbc_education_rss_feed_btn.setObjectName("export_bbc_education_rss_feed_btn")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(500, 639, 61, 21))
        self.label_14.setObjectName("label_14")
        self.export_bbc_health_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_health_rss_feed_btn.setGeometry(QtCore.QRect(720, 635, 113, 32))
        self.export_bbc_health_rss_feed_btn.setObjectName("export_bbc_health_rss_feed_btn")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(500, 669, 61, 21))
        self.label_15.setObjectName("label_15")
        self.export_bbc_politics_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_politics_rss_feed_btn.setGeometry(QtCore.QRect(720, 665, 113, 32))
        self.export_bbc_politics_rss_feed_btn.setObjectName("export_bbc_politics_rss_feed_btn")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(500, 689, 81, 41))
        self.label_16.setObjectName("label_16")
        self.export_bbc_science_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_science_rss_feed_btn.setGeometry(QtCore.QRect(720, 695, 113, 32))
        self.export_bbc_science_rss_feed_btn.setObjectName("export_bbc_science_rss_feed_btn")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(500, 729, 81, 21))
        self.label_17.setObjectName("label_17")
        self.export_bbc_technology_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_technology_rss_feed_btn.setGeometry(QtCore.QRect(720, 725, 113, 32))
        self.export_bbc_technology_rss_feed_btn.setObjectName("export_bbc_technology_rss_feed_btn")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(500, 759, 21, 21))
        self.label_18.setObjectName("label_18")
        self.export_bbc_uk_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_uk_rss_feed_btn.setGeometry(QtCore.QRect(720, 755, 113, 32))
        self.export_bbc_uk_rss_feed_btn.setObjectName("export_bbc_uk_rss_feed_btn")
        self.export_bbc_world_rss_feed_btn = QtWidgets.QPushButton(self.centralwidget)
        self.export_bbc_world_rss_feed_btn.setGeometry(QtCore.QRect(720, 785, 113, 32))
        self.export_bbc_world_rss_feed_btn.setObjectName("export_bbc_world_rss_feed_btn")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(500, 790, 41, 21))
        self.label_19.setObjectName("label_19")

        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit.setDateTime(QDateTime.currentDateTime())
        self.dateTimeEdit.setGeometry(QtCore.QRect(690, 10, 194, 24))
        self.dateTimeEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.dateTimeEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.dateTimeEdit.setReadOnly(True)
        self.dateTimeEdit.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.dateTimeEdit.setObjectName("dateTimeEdit")

        # Functionality for live update clock
        self.timer = QtCore.QTimer(self.centralwidget)
        self.timer.timeout.connect(lambda: self.dateTimeEdit.setDateTime(QDateTime.currentDateTime()))
        self.timer.start(1000)

        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(42, 34, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(495, 34, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(292, 34, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(774, 34, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.centralwidget)
        self.label_24.setGeometry(QtCore.QRect(845, 34, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.centralwidget)
        self.label_25.setGeometry(QtCore.QRect(587, 34, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.centralwidget)
        self.label_26.setGeometry(QtCore.QRect(670, 34, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.centralwidget)
        self.label_27.setGeometry(QtCore.QRect(390, 34, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_27.setFont(font)
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.centralwidget)
        self.label_28.setGeometry(QtCore.QRect(132, 34, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(202, 34, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_29.setFont(font)
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.centralwidget)
        self.label_30.setGeometry(QtCore.QRect(12, 40, 25, 20))
        self.label_30.setText("")
        self.label_30.setPixmap(QtGui.QPixmap("../icons/flags/United-States.png"))
        self.label_30.setScaledContents(True)
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.centralwidget)
        self.label_31.setGeometry(QtCore.QRect(102, 40, 25, 20))
        self.label_31.setText("")
        self.label_31.setPixmap(QtGui.QPixmap("../icons/flags/United-States.png"))
        self.label_31.setScaledContents(True)
        self.label_31.setObjectName("label_31")
        self.label_32 = QtWidgets.QLabel(self.centralwidget)
        self.label_32.setGeometry(QtCore.QRect(172, 40, 25, 20))
        self.label_32.setText("")
        self.label_32.setPixmap(QtGui.QPixmap("../icons/flags/United-States.png"))
        self.label_32.setScaledContents(True)
        self.label_32.setObjectName("label_32")

        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(390, 84, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.label_33 = QtWidgets.QLabel(self.centralwidget)
        self.label_33.setGeometry(QtCore.QRect(465, 40, 25, 20))
        self.label_33.setText("")
        self.label_33.setPixmap(QtGui.QPixmap("../icons/flags/India.png"))
        self.label_33.setScaledContents(True)
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.centralwidget)
        self.label_34.setGeometry(QtCore.QRect(262, 40, 25, 20))
        self.label_34.setText("")
        self.label_34.setPixmap(QtGui.QPixmap("../icons/flags/United-Kingdom.png"))
        self.label_34.setScaledContents(True)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.centralwidget)
        self.label_35.setGeometry(QtCore.QRect(360, 40, 25, 20))
        self.label_35.setText("")
        self.label_35.setPixmap(QtGui.QPixmap("../icons/flags/China.png"))
        self.label_35.setScaledContents(True)
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.centralwidget)
        self.label_36.setGeometry(QtCore.QRect(557, 40, 25, 20))
        self.label_36.setText("")
        self.label_36.setPixmap(QtGui.QPixmap("../icons/flags/France.png"))
        self.label_36.setScaledContents(True)
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(self.centralwidget)
        self.label_37.setGeometry(QtCore.QRect(744, 40, 25, 20))
        self.label_37.setText("")
        self.label_37.setPixmap(QtGui.QPixmap("../icons/flags/Russia.png"))
        self.label_37.setScaledContents(True)
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.centralwidget)
        self.label_38.setGeometry(QtCore.QRect(815, 40, 25, 20))
        self.label_38.setText("")
        self.label_38.setPixmap(QtGui.QPixmap("../icons/flags/Germany.png"))
        self.label_38.setScaledContents(True)
        self.label_38.setObjectName("label_38")
        self.label_39 = QtWidgets.QLabel(self.centralwidget)
        self.label_39.setGeometry(QtCore.QRect(640, 40, 25, 20))
        self.label_39.setText("")
        self.label_39.setPixmap(QtGui.QPixmap("../icons/flags/Japan.png"))
        self.label_39.setScaledContents(True)
        self.label_39.setObjectName("label_39")
        self.sandp_value_label = QtWidgets.QLabel(self.centralwidget)
        self.sandp_value_label.setGeometry(QtCore.QRect(10, 58, 60, 16))
        self.sandp_value_label.setText("")
        self.sandp_value_label.setObjectName("sandp_value_label")
        self.dow_value_label = QtWidgets.QLabel(self.centralwidget)
        self.dow_value_label.setGeometry(QtCore.QRect(100, 58, 60, 16))
        self.dow_value_label.setText("")
        self.dow_value_label.setObjectName("dow_value_label")
        self.nasdaq_value_label = QtWidgets.QLabel(self.centralwidget)
        self.nasdaq_value_label.setGeometry(QtCore.QRect(170, 58, 60, 16))
        self.nasdaq_value_label.setText("")
        self.nasdaq_value_label.setObjectName("nasdaq_value_label")
        self.ftse100_value_label = QtWidgets.QLabel(self.centralwidget)
        self.ftse100_value_label.setGeometry(QtCore.QRect(260, 58, 60, 16))
        self.ftse100_value_label.setText("")
        self.ftse100_value_label.setObjectName("ftse100_value_label")
        self.shanghai_value_label = QtWidgets.QLabel(self.centralwidget)
        self.shanghai_value_label.setGeometry(QtCore.QRect(360, 58, 60, 16))
        self.shanghai_value_label.setText("")
        self.shanghai_value_label.setObjectName("shanghai_value_label")
        self.nifty50_value_label = QtWidgets.QLabel(self.centralwidget)
        self.nifty50_value_label.setGeometry(QtCore.QRect(465, 58, 60, 16))
        self.nifty50_value_label.setText("")
        self.nifty50_value_label.setObjectName("nifty50_value_label")
        self.cac_value_label = QtWidgets.QLabel(self.centralwidget)
        self.cac_value_label.setGeometry(QtCore.QRect(560, 58, 60, 16))
        self.cac_value_label.setText("")
        self.cac_value_label.setObjectName("cac_value_label")
        self.nikkei225_value_label = QtWidgets.QLabel(self.centralwidget)
        self.nikkei225_value_label.setGeometry(QtCore.QRect(640, 58, 60, 16))
        self.nikkei225_value_label.setText("")
        self.nikkei225_value_label.setObjectName("nikkei225_value_label")
        self.moex_value_label = QtWidgets.QLabel(self.centralwidget)
        self.moex_value_label.setGeometry(QtCore.QRect(744, 58, 60, 16))
        self.moex_value_label.setText("")
        self.moex_value_label.setObjectName("moex_value_label")
        self.dax_value_label = QtWidgets.QLabel(self.centralwidget)
        self.dax_value_label.setGeometry(QtCore.QRect(815, 58, 60, 16))
        self.dax_value_label.setText("")
        self.dax_value_label.setObjectName("dax_value_label")

        # Button for launching the dialog which runs the sft main.py (main application executable)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.prep_update())
        self.pushButton.setGeometry(QtCore.QRect(13, 9, 120, 25))
        self.pushButton.setStyleSheet("background-color : #0066CC; "
                                      "color : white; ")
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.pushButton.setFont(font)
        self.pushButton.setCheckable(False)
        self.pushButton.setAutoDefault(False)
        self.pushButton.setDefault(True)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionRSS_Feed = QtWidgets.QAction(MainWindow)
        self.actionRSS_Feed.setObjectName("actionRSS_Feed")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Display chart button functionality
        self.uk_housing_show_chart_btn.clicked.connect(self.show_uk_housing_chart)
        self.uk_electric_show_chart_btn.clicked.connect(self.show_uk_electric_chart)
        self.uk_gas_show_chart_btn.clicked.connect(self.show_uk_gas_chart)
        self.uk_water_show_chart_btn.clicked.connect(self.show_uk_water_chart)
        self.uk_cpi_show_chart_btn.clicked.connect(self.show_uk_cpi_chart)

        # Save chart button functionality
        self.export_uk_housing_chart_btn.clicked.connect(self.export_uk_housing_chart)
        self.export_uk_electric_chart_btn.clicked.connect(self.export_uk_electric_chart)
        self.export_uk_gas_chart_btn.clicked.connect(self.export_uk_gas_chart)
        self.export_uk_water_chart_btn.clicked.connect(self.export_uk_water_chart)
        self.export_uk_cpi_chart_btn.clicked.connect(self.export_uk_cpi_chart)

        # Save .xlsx file button functionality
        self.export_uk_housing_xlsx_btn.clicked.connect(self.export_uk_housing_xlsx)
        self.export_uk_electric_xlsx_btn.clicked.connect(self.export_uk_electric_xlsx)
        self.export_uk_gas_xlsx_btn.clicked.connect(self.export_uk_gas_xlsx)
        self.export_uk_water_xlsx_btn.clicked.connect(self.export_uk_water_xlsx)
        self.export_uk_cpi_xlsx_btn.clicked.connect(self.export_uk_cpi_xlsx)

        # Save RSS feed button functionality
        self.export_bbc_business_rss_feed_btn.clicked.connect(self.export_bbc_business_rss_feed)
        self.export_bbc_education_rss_feed_btn.clicked.connect(self.export_bbc_education_rss_feed)
        self.export_bbc_health_rss_feed_btn.clicked.connect(self.export_bbc_health_rss_feed)
        self.export_bbc_politics_rss_feed_btn.clicked.connect(self.export_bbc_politics_rss_feed)
        self.export_bbc_science_rss_feed_btn.clicked.connect(self.export_bbc_science_rss_feed)
        self.export_bbc_technology_rss_feed_btn.clicked.connect(self.export_bbc_technology_rss_feed)
        self.export_bbc_uk_rss_feed_btn.clicked.connect(self.export_bbc_uk_rss_feed)
        self.export_bbc_world_rss_feed_btn.clicked.connect(self.export_bbc_world_rss_feed)
        self.export_investing_rss_feed_btn.clicked.connect(self.export_investing_rss_feed)

        ########################
        # Acquire and set the values of the major stock indices
        ########################

        def create_indices_url():
            """Create each stock url using stock symbols list as ticker search parameters. Then return a list of URL's
            which will be used within get_indices_value() function.
            """

            symbols = ['GSPC', 'DJI', 'IXIC', 'FTSE', 'NSEI', 'FCHI', 'N225', 'GDAXI', 'IMOEX.ME', '000001.SS']
            url_list = []
            for ticker in symbols:
                url = f'https://uk.finance.yahoo.com/lookup/all?s={ticker}'
                url_list.append(url)
            return url_list

        def get_indices_value(url_list: list):
            indices_values = []
            for url in url_list:
                if url:
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36'}
                    res = requests.get(url, headers=headers)
                    res.raise_for_status()
                    soup = bs4.BeautifulSoup(res.text, 'html.parser')
                    indices_price_value = soup.select('#Main tbody>tr td')[2].text
                    indices_values.append(indices_price_value)
            return indices_values

        def set_sandp_value(value: str):
            """Print stock value to respective GUI label"""
            self.sandp_value_label.setGeometry(QtCore.QRect(10, 58, 70, 16))
            self.sandp_value_label.setFont(QFont('Arial', 12))
            self.sandp_value_label.setText("$" + value)

        def set_dow_value(value: str):
            """Print stock value to respective GUI label"""

            self.dow_value_label.setGeometry(QtCore.QRect(100, 58, 70, 16))
            self.dow_value_label.setFont(QFont('Arial', 12))
            self.dow_value_label.setText("$" + value)

        def set_nasdaq_value(value: str):
            """Print stock value to respective GUI label"""

            self.nasdaq_value_label.setGeometry(QtCore.QRect(170, 58, 70, 16))
            self.nasdaq_value_label.setFont(QFont('Arial', 12))
            self.nasdaq_value_label.setText("$" + value)

        def set_ftse100_value(value: str):
            """Print stock value to respective GUI label"""

            self.ftse100_value_label.setGeometry(QtCore.QRect(260, 58, 70, 16))
            self.ftse100_value_label.setFont(QFont('Arial', 12))
            self.ftse100_value_label.setText("$" + value)

        def set_shanghai_value(value: str):
            """Print stock value to respective GUI label"""

            self.shanghai_value_label.setGeometry(QtCore.QRect(360, 58, 70, 16))
            self.shanghai_value_label.setFont(QFont('Arial', 12))
            self.shanghai_value_label.setText("$" + value)

        def set_nifty50_value(value: str):
            """Print stock value to respective GUI label"""

            self.nifty50_value_label.setGeometry(QtCore.QRect(465, 58, 70, 16))
            self.nifty50_value_label.setFont(QFont('Arial', 12))
            self.nifty50_value_label.setText("$" + value)

        def set_cac40_value(value: str):
            """Print stock value to respective GUI label"""

            self.cac_value_label.setGeometry(QtCore.QRect(560, 58, 70, 16))
            self.cac_value_label.setFont(QFont('Arial', 12))
            self.cac_value_label.setText("$" + value)

        def set_nikkei225_value(value: str):
            """Print stock value to respective GUI label"""

            self.nikkei225_value_label.setGeometry(QtCore.QRect(640, 58, 70, 16))
            self.nikkei225_value_label.setFont(QFont('Arial', 12))
            self.nikkei225_value_label.setText("$" + value)

        def set_moex_value(value: str):
            """Print stock value to respective GUI label"""

            self.moex_value_label.setGeometry(QtCore.QRect(745, 58, 70, 16))
            self.moex_value_label.setFont(QFont('Arial', 12))
            self.moex_value_label.setText("$" + value)

        def set_dax_value(value: str):
            """Print stock value to respective GUI label"""

            self.dax_value_label.setGeometry(QtCore.QRect(815, 58, 60, 16))
            self.dax_value_label.setFont(QFont('Arial', 12))
            self.dax_value_label.setText("$" + value)

        stock_urls = create_indices_url()
        stock_value = get_indices_value(stock_urls)
        set_sandp_value(stock_value[0])
        set_dow_value(stock_value[1])
        set_nasdaq_value(stock_value[2])
        set_ftse100_value(stock_value[3])
        set_shanghai_value(stock_value[4])
        set_nifty50_value(stock_value[5])
        set_cac40_value(stock_value[6])
        set_nikkei225_value(stock_value[7])
        set_moex_value(stock_value[8])
        set_dax_value(stock_value[9])

        ########################
        # END
        ########################

        ########################
        # Display RRS Feeds to RSS Feeds textarea
        ########################

        def create_rss_urls():
            """Using the list of topics, create URL's that relate to the corresponding RSS feed.
            ie 'business' makes http://feeds.bbci.co.uk/news/business/rss.xml.
            To be used by list_rss_feed() function."""

            topics = ['business', 'technology', 'science_and_environment',
                      'politics', 'world', 'health',
                      'education', 'uk']
            url_list = []
            for topic in topics:
                url = f'http://feeds.bbci.co.uk/news/{topic}/rss.xml'
                url_list.append(url)
            return url_list

        def list_rss_feed(rss_feed_url):
            """Create a list of the top 10 articles for each RSS Feed topic.
            To be used by convert_rss_list_to_str() function."""
            data = feedparser.parse(rss_feed_url)
            i = 0
            full_feed_text_list = []
            while i < 10:  # Find first 10 articles
                feed_title_str = data['entries'][i]["title"]
                feed_description_str = data['entries'][i]['description']

                full_feed_text = feed_title_str + ' ' + feed_description_str
                i = i + 1  # Move to the next article
                full_feed_text_list.append(full_feed_text)  # Add each article to this list
            return full_feed_text_list

        def combine_all_rss_lists(rss_list: list, rss_list_2: list, rss_list_3: list, rss_list_4: list, rss_list_5: list, rss_list_6: list, rss_list_7: list, rss_list_8: list):
            full_list = rss_list + rss_list_2 + rss_list_3 + rss_list_4 + rss_list_5 + rss_list_6 + rss_list_7 + rss_list_8
            return full_list

        def convert_rss_list_to_str(rss_list: list):
            """Convert RSS feed text to string which is to be displayed in rss_live_feeds."""

            s = '\n\n'.join(str(x) for x in rss_list)
            return s

        topic_urls = create_rss_urls()
        bbc_rss_business = list_rss_feed(topic_urls[0])
        bbc_rss_technology = list_rss_feed(topic_urls[1])
        bbc_science_and_environment_feed = list_rss_feed(topic_urls[2])
        bbc_politics_feed = list_rss_feed(topic_urls[3])
        bbc_world_feed = list_rss_feed(topic_urls[4])
        bbc_health_feed = list_rss_feed(topic_urls[5])
        bbc_uk_feed = list_rss_feed(topic_urls[6])
        bbc_education_feed = list_rss_feed(topic_urls[7])

        full_list = combine_all_rss_lists(bbc_rss_business, bbc_rss_technology, bbc_science_and_environment_feed,
        bbc_politics_feed, bbc_world_feed, bbc_health_feed, bbc_uk_feed, bbc_education_feed)

        self.rss_live_feeds = QtWidgets.QTextBrowser(self.centralwidget)
        self.rss_live_feeds.setGeometry(QtCore.QRect(10, 110, 881, 391))
        self.rss_live_feeds.setObjectName("rss_live_feeds")
        self.rss_live_feeds.setText(str(convert_rss_list_to_str(full_list)))

        ########################
        # END
        ########################

        ########################
        # Save chart functions
        ########################

    def export_uk_housing_chart(self):
        """Exports (saves) chart (.png) file to the users chosen directory."""

        filepath = '../charts/uk_average_house_price.png'
        image = Image.open(filepath)

        filename, _ = QFileDialog.getSaveFileName(None, "Save image file", filepath, "Image Files (*.png)")
        if filename:
            image.save(filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'Image file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_electric_chart(self):
        """Exports (saves) chart (.png) file to the users chosen directory."""

        filepath = '../charts/uk_cpi_electric_index.png'
        image = Image.open(filepath)

        filename, _ = QFileDialog.getSaveFileName(None, "Save image file", filepath, "Image Files (*.png)")
        if filename:
            image.save(filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'Image file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_gas_chart(self):
        """Exports (saves) chart (.png) file to the users chosen directory."""

        filepath = '../charts/uk_cpi_gas_index.png'
        image = Image.open(filepath)

        filename, _ = QFileDialog.getSaveFileName(None, "Save image file", filepath, "Image Files (*.png)")
        if filename:
            image.save(filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'Image file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_water_chart(self):
        """Exports (saves) chart (.png) file to the users chosen directory."""

        filepath = '../charts/uk_cpi_water_index.png'
        image = Image.open(filepath)

        filename, _ = QFileDialog.getSaveFileName(None, "Save image file", filepath, "Image Files (*.png)")
        if filename:
            image.save(filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'Image file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_cpi_chart(self):
        """Exports (saves) chart (.png) file to the users chosen directory."""

        filepath = '../charts/ukcpi.png'
        image = Image.open(filepath)

        filename, _ = QFileDialog.getSaveFileName(None, "Save image file", filepath, "Image Files (*.png)")
        if filename:
            image.save(filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'Image file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

        ########################
        # END
        ########################

        ########################
        # Display chart functions
        ########################

    def show_uk_housing_chart(self):
        """Open external window which shows the respective chart .png image."""

        self.ui.chart_image_holder.setPixmap(QtGui.QPixmap('../charts/uk_average_house_price.png'))

    def show_uk_electric_chart(self):
        """Open external window which shows the respective chart .png image."""

        self.ui.chart_image_holder.setPixmap(QtGui.QPixmap('../charts/uk_cpi_electric_index.png'))

    def show_uk_gas_chart(self):
        """Open external window which shows the respective chart .png image."""

        self.ui.chart_image_holder.setPixmap(QtGui.QPixmap('../charts/uk_cpi_gas_index.png'))

    def show_uk_water_chart(self):
        """Open external window which shows the respective chart .png image."""

        self.ui.chart_image_holder.setPixmap(QtGui.QPixmap('../charts/uk_cpi_water_index.png'))

    def show_uk_cpi_chart(self):
        """Open external window which shows the respective chart .png image."""

        self.ui.chart_image_holder.setPixmap(QtGui.QPixmap('../charts/ukcpi.png'))

        ########################
        # END
        ########################

        ########################
        # Save .xlsx functions
        ########################

    def export_uk_housing_xlsx(self):
        """Exports respective (saves) raw data (.xlsx) file to the users chosen directory."""

        filepath = '../raw data/housingprices/clean_uk_average_house_price.xlsx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.xlsx)")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_electric_xlsx(self):
        """Exports respective (saves) raw data (.xlsx) file to the users chosen directory."""

        filepath = '../raw data/electricdata/clean_uk_cpi_electric_index.xlsx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.xlsx)")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_gas_xlsx(self):
        """Exports respective (saves) raw data (.xlsx) file to the users chosen directory."""

        filepath = '../raw data/gasdata/clean_uk_cpi_gas_index.xlsx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.xlsx)")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_water_xlsx(self):
        """Exports respective (saves) raw data (.xlsx) file to the users chosen directory."""

        filepath = '../raw data/watersupplydata/clean_uk_cpi_water_index.xlsx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.xlsx)")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_uk_cpi_xlsx(self):
        """Exports respective (saves) raw data (.xlsx) file to the users chosen directory."""

        filepath = '../raw data/cpi/clean_ukcpi.xlsx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.xlsx)")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

        ########################
        # END
        ########################

        ########################
        # save RSS feeds
        ########################

    def export_bbc_business_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_business.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_education_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_education.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_health_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_health.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_politics_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_politics.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_science_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_science_and_environment.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_technology_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_technology.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_uk_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_uk.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_bbc_world_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/bbcnews/bbc_news_world.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

    def export_investing_rss_feed(self):
        """Exports respective (saves) RSS data file to the users chosen directory."""

        filepath = '../newsfeeds/investing.com/investingnews.docx'
        filename, _ = QFileDialog.getSaveFileName(None, "Save excel file", filepath, "Excel Files (*.png")
        if filename:
            shutil.copy(filepath, filename)
            popup_msg = QMessageBox()
            popup_msg.setText(f'xlsx file saved to {filename}')
            popup_msg.setStandardButtons(QMessageBox.Ok)
            popup_msg.setIcon(QMessageBox.Information)
            popup_msg.exec_()  # Show the message popup

        ########################
        # END
        ########################

        ########################
        # Open progress window
        ########################

        #  Prep window to run 'main.py' script for stf program

    def prep_update(self):
        """Calls 'Execute' Class from 'progress.py' file which contains the functions to run
        the main.py program file (Stock Fund Tracker executable)."""

        self.ex = Execute()
        self.ex.show()

    ########################
    # END
    ########################

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Stock Fund Tracker App"))
        self.label.setText(_translate("MainWindow", "UK Average Housing Price chart/table"))
        self.label_2.setText(_translate("MainWindow", "BBC RSS"))
        self.label_3.setText(_translate("MainWindow", "UK Electricity Consumer Price Index (CPI)"))
        self.label_4.setText(_translate("MainWindow", "UK Gas Consumer Price Index (CPI)"))
        self.label_5.setText(_translate("MainWindow", "UK Water Consumer Price Index (CPI)"))
        self.label_7.setText(_translate("MainWindow", "Investing.com"))
        self.uk_housing_show_chart_btn.setText(_translate("MainWindow", "Show"))
        self.uk_electric_show_chart_btn.setText(_translate("MainWindow", "Show"))
        self.uk_water_show_chart_btn.setText(_translate("MainWindow", "Show"))
        self.uk_gas_show_chart_btn.setText(_translate("MainWindow", "Show"))
        self.export_uk_housing_chart_btn.setText(_translate("MainWindow", "Export chart"))
        self.label_8.setText(_translate("MainWindow", "UK Energy and Housing Data"))
        self.label_9.setText(_translate("MainWindow", "RSS Feeds"))
        self.export_bbc_business_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.export_investing_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_10.setText(_translate("MainWindow", "Major indexes LIVE"))
        self.export_uk_housing_xlsx_btn.setText(_translate("MainWindow", "Export .xlsx"))
        self.export_uk_electric_chart_btn.setText(_translate("MainWindow", "Export chart"))
        self.export_uk_electric_xlsx_btn.setText(_translate("MainWindow", "Export .xlsx"))
        self.export_uk_gas_chart_btn.setText(_translate("MainWindow", "Export chart"))
        self.export_uk_gas_xlsx_btn.setText(_translate("MainWindow", "Export .xlsx"))
        self.export_uk_water_chart_btn.setText(_translate("MainWindow", "Export chart"))
        self.export_uk_water_xlsx_btn.setText(_translate("MainWindow", "Export .xlsx"))
        self.label_11.setText(_translate("MainWindow", "UK Consumer Price Index (CPI)"))
        self.export_uk_cpi_xlsx_btn.setText(_translate("MainWindow", "Export .xlsx"))
        self.uk_cpi_show_chart_btn.setText(_translate("MainWindow", "Show"))
        self.export_uk_cpi_chart_btn.setText(_translate("MainWindow", "Export chart"))
        self.label_12.setText(_translate("MainWindow", "Business"))
        self.label_13.setText(_translate("MainWindow", "Education"))
        self.export_bbc_education_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_14.setText(_translate("MainWindow", "Health"))
        self.export_bbc_health_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_15.setText(_translate("MainWindow", "Politics"))
        self.export_bbc_politics_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_16.setText(_translate("MainWindow", "Science & \n"
"Environment"))
        self.export_bbc_science_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_17.setText(_translate("MainWindow", "Technology"))
        self.export_bbc_technology_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_18.setText(_translate("MainWindow", "UK"))
        self.export_bbc_uk_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.export_bbc_world_rss_feed_btn.setText(_translate("MainWindow", "Export"))
        self.label_19.setText(_translate("MainWindow", "World"))
        self.label_6.setText(_translate("MainWindow", "S&P 500"))
        self.label_20.setText(_translate("MainWindow", "NIFTY 50"))
        self.label_21.setText(_translate("MainWindow", "FTSE 100"))
        self.label_23.setText(_translate("MainWindow", "MOEX"))
        self.label_24.setText(_translate("MainWindow", "DAX"))
        self.label_25.setText(_translate("MainWindow", "CAC 40"))
        self.label_26.setText(_translate("MainWindow", "NIKKEI 225"))
        self.label_27.setText(_translate("MainWindow", "SHANGHAI"))
        self.label_28.setText(_translate("MainWindow", "DOW"))
        self.label_29.setText(_translate("MainWindow", "NASDAQ"))
        self.label_22.setText(_translate("MainWindow", "RSS Feeds"))
        self.pushButton.setText(_translate("MainWindow", "Update Application"))
        self.actionRSS_Feed.setText(_translate("MainWindow", "RSS Feed"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
